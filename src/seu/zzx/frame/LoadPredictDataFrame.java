/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package seu.zzx.frame;

import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import seu.zzx.constant.ConstantLibrary;
import seu.zzx.dbc.EditTable;
import seu.zzx.panel.LoadPredictDataPane;
import seu.zzx.util.OperateFile;

/**
 *
 * @author zzx_seu
 */
public class LoadPredictDataFrame extends JFrame implements ComponentListener {

    /**
     * Creates new form LoadPredictDataFrame
     */
    public LoadPredictDataFrame(MainFunction mf) {
        this.mf = mf;
        initComponents();
        this.addComponentListener(this);
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        this.setVisible(true);
        DefaultTableCellRenderer hr = (DefaultTableCellRenderer) this.jTable1.getTableHeader().getDefaultRenderer();
        hr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);//列名居中  
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();// 设置table内容居中
        tcr.setHorizontalAlignment(SwingConstants.CENTER);// 这句和上句作用一样  
        this.jTable1.setDefaultRenderer(Object.class, tcr);
        this.jTable1.setShowGrid(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("预测数据：");

        jButton1.setText("选择");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("确定");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(jButton2)
                .addContainerGap(541, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();			//文件选择器
        chooser.setMultiSelectionEnabled(false);			//单选模式
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel Files (.xls, .xlsx)", "xls", "xlsx");//文件类型过滤器
        chooser.setFileFilter(filter);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("请选择预测数据文件");
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            this.jTextField1.setText(file.toString());
            String fileName = file.toString();
            OperateFile.openExcel(fileName);
            int rowCount = OperateFile.getRowCount(0);
            int colCount = OperateFile.getColCount(0);
            ConstantLibrary.predictData = new String[rowCount][colCount];
            ConstantLibrary.predictData1 = new String[rowCount][colCount];
            ConstantLibrary.predictColumnName = new String[colCount];
            ConstantLibrary.predictColumnName1 = new String[colCount];
            for (int cj = 0; cj < colCount; ++cj) {
                ConstantLibrary.predictColumnName[cj] = OperateFile.getCellContent(cj, 0);
                String str = "column" + (cj + 1);
                ConstantLibrary.predictColumnName1[cj] = str;
                ConstantLibrary.predictColumnMap.put(str, ConstantLibrary.predictColumnName[cj]);
                ConstantLibrary.predictColumnMap1.put(ConstantLibrary.predictColumnName[cj], str);
            }
            for (int i = 1; i <= rowCount; i++) {
                for (int j = 0; j < colCount; j++) {
                    ConstantLibrary.predictData[i - 1][j] = OperateFile.getCellContent(j, i);
                }
            }
            DefaultTableModel dtModel = new DefaultTableModel(ConstantLibrary.predictData, ConstantLibrary.predictColumnName);
            this.jTable1.setModel(dtModel);

        } else {

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        /*
        EditTable.createTable(ConstantLibrary.PREDICTTABLENAME, ConstantLibrary.predictColumnName1);
        EditTable.importDataToDB(ConstantLibrary.PREDICTTABLENAME, ConstantLibrary.predictData);
        double temp = 0.0;
        for (int i = 0; i < ConstantLibrary.predictData.length; ++i) {
            for (int j = 0; j < ConstantLibrary.predictData[i].length; ++j) {
                try {
                    temp = Double.parseDouble(ConstantLibrary.predictData[i][j]);
                } catch (Exception e) {
                    ConstantLibrary.predictData1[i][j] = ConstantLibrary.predictData[i][j];
                    continue;
                }
                if (temp <= -100) {
                    ConstantLibrary.predictData1[i][j] = "-10";
                } else if (temp > -100 && temp <= -90) {
                    ConstantLibrary.predictData1[i][j] = "-9";
                } else if (temp > -90 && temp <= -80) {
                    ConstantLibrary.predictData1[i][j] = "-8";
                } else if (temp > -80 && temp <= -70) {
                    ConstantLibrary.predictData1[i][j] = "-7";
                } else if (temp > -70 && temp <= -60) {
                    ConstantLibrary.predictData1[i][j] = "-6";
                } else if (temp > -60 && temp <= -50) {
                    ConstantLibrary.predictData1[i][j] = "-5";
                } else if (temp > -50 && temp <= -40) {
                    ConstantLibrary.predictData1[i][j] = "-4";
                } else if (temp > -40 && temp <= -30) {
                    ConstantLibrary.predictData1[i][j] = "-3";
                } else if (temp > -30 && temp <= -20) {
                    ConstantLibrary.predictData1[i][j] = "-2";
                } else if (temp > -20 && temp <= -10) {
                    ConstantLibrary.predictData1[i][j] = "-1";
                } else if (temp > -10 && temp <= 0) {
                    ConstantLibrary.predictData1[i][j] = "0";
                } else if (temp > 0 && temp <= 10) {
                    ConstantLibrary.predictData1[i][j] = "1";
                } else if (temp > 10 && temp <= 20) {
                    ConstantLibrary.predictData1[i][j] = "2";
                } else if (temp > 20 && temp <= 30) {
                    ConstantLibrary.predictData1[i][j] = "3";
                } else if (temp > 30 && temp <= 40) {
                    ConstantLibrary.predictData1[i][j] = "4";
                } else if (temp > 40 && temp <= 50) {
                    ConstantLibrary.predictData1[i][j] = "5";
                } else if (temp > 50 && temp <= 60) {
                    ConstantLibrary.predictData1[i][j] = "6";
                } else if (temp > 60 && temp <= 70) {
                    ConstantLibrary.predictData1[i][j] = "7";
                } else if (temp > 70 && temp <= 80) {
                    ConstantLibrary.predictData1[i][j] = "8";
                } else if (temp > 80 && temp <= 90) {
                    ConstantLibrary.predictData1[i][j] = "9";
                } else if (temp > 90) {
                    ConstantLibrary.predictData1[i][j] = "10";
                }
            }
        }
        EditTable.createTable(ConstantLibrary.PREDICTTABLENAME1, ConstantLibrary.predictColumnName1);
        EditTable.importDataToDB(ConstantLibrary.PREDICTTABLENAME1, ConstantLibrary.predictData1);
        */
        this.mf.getjSplitPane1().setRightComponent(new LoadPredictDataPane(this.mf));
    }//GEN-LAST:event_jButton2ActionPerformed

    private MainFunction mf;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentResized(ComponentEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        int width = this.getWidth();
        this.jButton2.setLocation(width / 2 - this.jButton2.getWidth() / 2, this.jButton2.getY());
    }

    @Override
    public void componentMoved(ComponentEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void componentShown(ComponentEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void componentHidden(ComponentEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}

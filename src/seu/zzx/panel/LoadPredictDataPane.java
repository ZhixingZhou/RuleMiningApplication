/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package seu.zzx.panel;

import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import seu.zzx.constant.ConstantLibrary;
import seu.zzx.dbc.EditTable;
import seu.zzx.frame.MainFunction;
import seu.zzx.table.OperateJTable;

/**
 *
 * @author zzx_seu
 */
public class LoadPredictDataPane extends JPanel implements ComponentListener {

    private String[] predictColumnNames = null;

    /**
     * Creates new form LoadPredictDataPane
     */
    public LoadPredictDataPane(MainFunction mf) {
        this.mf = mf;
        initComponents();
        this.addComponentListener(this);
        this.jPanel1.addComponentListener(this);
        this.jPanel2.addComponentListener(this);
        DefaultTableCellRenderer hr1 = (DefaultTableCellRenderer) this.jTable1.getTableHeader().getDefaultRenderer();
        hr1.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);//列名居中  
        DefaultTableCellRenderer tcr1 = new DefaultTableCellRenderer();// 设置table内容居中
        tcr1.setHorizontalAlignment(SwingConstants.CENTER);// 这句和上句作用一样  
        this.jTable1.setDefaultRenderer(Object.class, tcr1);
        this.jTable1.setShowGrid(true);

        DefaultTableCellRenderer hr2 = (DefaultTableCellRenderer) this.jTable2.getTableHeader().getDefaultRenderer();
        hr2.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);//列名居中  
        DefaultTableCellRenderer tcr2 = new DefaultTableCellRenderer();// 设置table内容居中
        tcr2.setHorizontalAlignment(SwingConstants.CENTER);// 这句和上句作用一样  
        this.jTable2.setDefaultRenderer(Object.class, tcr2);
        this.jTable2.setShowGrid(true);

        this.predictColumnNames = OperateJTable.getPredictColumnNames();
        myTableModel dtModel2 = new myTableModel(OperateJTable.getPredictTableData(), this.predictColumnNames);
        this.jTable2.setModel(dtModel2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "请选择预测方式", "已流失关联规则预测", "未流失关联规则预测", "分类规则预测", "复合预测" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jButton1.setText("预测");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jCheckBox1.setText("全选");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jCheckBox1)
                        .addContainerGap(157, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jCheckBox2.setText("全选");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });

        jButton2.setText("保存");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(43, 43, 43))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox2)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        int index = this.jComboBox1.getSelectedIndex();
        String[] columnName = new String[]{"选择", "条件", "结果", "支持度", "置信度"};
        if (index == 1) {
            Object[][] data = EditTable.getRuleDataArray(ConstantLibrary.lostedRuleTableName);
            myTableModel mydtm = new myTableModel(data, columnName);
            this.jTable1.setModel(mydtm);
        } else if (index == 2) {
            Object[][] data = EditTable.getRuleDataArray(ConstantLibrary.unlostedRuleTableName);
            myTableModel mydtm = new myTableModel(data, columnName);
            this.jTable1.setModel(mydtm);
        }
        for (int i = 0; i < this.jTable2.getRowCount(); ++i) {
            this.jTable2.getModel().setValueAt(false, i, 0);
            this.jTable2.getModel().setValueAt("", i, this.jTable2.getColumnCount() - 1);
        }
        this.jCheckBox1.setSelected(false);
        this.jCheckBox2.setSelected(false);
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String result = "";
        if (this.jTable1.getRowCount() > 0) {
            result = this.jTable1.getModel().getValueAt(0, 2).toString();
        }
        Map<String, String> predictMap = new HashMap<String, String>();
        for (int i = 0; i < this.jTable2.getRowCount(); ++i) {
            predictMap.clear();
            if ((Boolean) (this.jTable2.getModel().getValueAt(i, 0))) {
                for (int j = 1; j < this.jTable2.getColumnCount() - 1; ++j) {
                    String temp = this.jTable2.getModel().getValueAt(i, j).toString();
                    String tempValue = "";
                    try {
                        double tempDouble = Double.parseDouble(temp);
                        if (tempDouble <= -100) {
                            tempValue = "-10";
                        } else if (tempDouble > -100 && tempDouble <= -90) {
                            tempValue = "-9";
                        } else if (tempDouble > -90 && tempDouble <= -80) {
                            tempValue = "-8";
                        } else if (tempDouble > -80 && tempDouble <= -70) {
                            tempValue = "-7";
                        } else if (tempDouble > -70 && tempDouble <= -60) {
                            tempValue = "-6";
                        } else if (tempDouble > -60 && tempDouble <= -50) {
                            tempValue = "-5";
                        } else if (tempDouble > -50 && tempDouble <= -40) {
                            tempValue = "-4";
                        } else if (tempDouble > -40 && tempDouble <= -30) {
                            tempValue = "-3";
                        } else if (tempDouble > -30 && tempDouble <= -20) {
                            tempValue = "-2";
                        } else if (tempDouble > -20 && tempDouble <= -10) {
                            tempValue = "-1";
                        } else if (tempDouble > -10 && tempDouble <= 0) {
                            tempValue = "0";
                        } else if (tempDouble > 0 && tempDouble <= 10) {
                            tempValue = "1";
                        } else if (tempDouble > 10 && tempDouble <= 20) {
                            tempValue = "2";
                        } else if (tempDouble > 20 && tempDouble <= 30) {
                            tempValue = "3";
                        } else if (tempDouble > 30 && tempDouble <= 40) {
                            tempValue = "4";
                        } else if (tempDouble > 40 && tempDouble <= 50) {
                            tempValue = "5";
                        } else if (tempDouble > 50 && tempDouble <= 60) {
                            tempValue = "6";
                        } else if (tempDouble > 60 && tempDouble <= 70) {
                            tempValue = "7";
                        } else if (tempDouble > 70 && tempDouble <= 80) {
                            tempValue = "8";
                        } else if (tempDouble > 80 && tempDouble <= 90) {
                            tempValue = "9";
                        } else if (tempDouble > 90) {
                            tempValue = "10";
                        }
                        predictMap.put(this.predictColumnNames[j], tempValue);
                    } catch (Exception e) {
                        predictMap.put(this.predictColumnNames[j], temp);
                        continue;
                    }
                }
                for (int m = 0; m < this.jTable1.getRowCount(); ++m) {
                    if ((Boolean) this.jTable1.getModel().getValueAt(m, 0)) {
                        String s1 = this.jTable1.getModel().getValueAt(m, 1).toString();
                        String[] s2 = s1.split(",");
                        boolean flag = true;
                        for (int x = 0; x < s2.length; ++x) {
                            String sx = s2[x];
                            String[] sx1 = sx.split("=");
                            if (!(predictMap.containsKey(sx1[0]) && predictMap.get(sx1[0]).equals(sx1[1]))) {
                                flag = false;
                                break;
                            }
                        }
                        if (flag) {
                            this.jTable2.getModel().setValueAt(result, i, this.jTable2.getColumnCount() - 1);
                            break;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        // TODO add your handling code here:
        if (this.jCheckBox1.isSelected()) {
            for (int i = 0; i < this.jTable1.getRowCount(); ++i) {
                this.jTable1.getModel().setValueAt(true, i, 0);
            }
        } else {
            for (int i = 0; i < this.jTable1.getRowCount(); ++i) {
                this.jTable1.getModel().setValueAt(false, i, 0);
            }
        }
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged
        // TODO add your handling code here:
        if (this.jCheckBox2.isSelected()) {
            for (int i = 0; i < this.jTable2.getRowCount(); ++i) {
                this.jTable2.getModel().setValueAt(true, i, 0);
            }
        } else {
            for (int i = 0; i < this.jTable2.getRowCount(); ++i) {
                this.jTable2.getModel().setValueAt(false, i, 0);
            }
        }
        for (int i = 0; i < this.jTable2.getRowCount(); ++i) {
            //this.jTable2.getModel().setValueAt(false, i, 0);
            this.jTable2.getModel().setValueAt("", i, this.jTable2.getColumnCount() - 1);
        }
    }//GEN-LAST:event_jCheckBox2ItemStateChanged

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        int row = this.jTable2.getSelectedRow();
        if (!(Boolean) this.jTable2.getModel().getValueAt(row, 0)) {
            this.jTable2.getModel().setValueAt("", row, this.jTable2.getColumnCount() - 1);
            //this.jCheckBox2.setSelected(false);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();			//文件选择器
        chooser.setMultiSelectionEnabled(false);			//单选模式
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel Files (.xls)", "xls");//文件类型过滤器
        chooser.setFileFilter(filter);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("保存预测结果路径");
        int result = chooser.showSaveDialog(this.mf);
        if (result == JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().getAbsolutePath() + ".xls";
            try {
                File file = new File(fileName);
                exportTable(jTable2, file);
            } catch (Exception e) {
                e.printStackTrace();
            }
            JOptionPane.showMessageDialog(this.mf, "保存成功!", "", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * 导出JTable到Excel
     */
    public void exportTable(JTable table, File file) throws IOException {

        try {
            OutputStream out = new FileOutputStream(file);
            TableModel model = table.getModel();
            WritableWorkbook wwb = Workbook.createWorkbook(out);
            WritableSheet ws = wwb.createSheet("关联规则", 0);
            for (int i = 0; i < model.getColumnCount() - 1; i++) {
                jxl.write.Label labelN = new jxl.write.Label(i, 0, model.getColumnName(i + 1));
                try {
                    ws.addCell(labelN);
                } catch (RowsExceededException e) {
                    e.printStackTrace();
                } catch (WriteException we) {
                    we.printStackTrace();
                }
            }
            int row = 1;
            for (int j = 1; j <= model.getRowCount(); ++j) {
                if (model.getValueAt(j - 1, 0).equals(true)) {
                    for (int i = 0; i < model.getColumnCount() - 1; ++i) {
                        jxl.write.Label labelN = new jxl.write.Label(i, row, model.getValueAt(j-1, i + 1).toString());
                        try {
                            ws.addCell(labelN);
                        } catch (RowsExceededException e) {
                            e.printStackTrace();
                        } catch (WriteException we) {
                            we.printStackTrace();
                        }
                    }
                    row++;
                }
            }
            wwb.write();
            try {
                wwb.close();
                out.close();
            } catch (WriteException e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
        }
    }
    private MainFunction mf;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentResized(ComponentEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        int width = this.getWidth();
        int height = this.getHeight();
        this.jPanel1.setSize(width / 2 - 19, height - 38 - this.jComboBox1.getHeight());
        this.jPanel2.setLocation(28 + this.jPanel1.getWidth(), this.jPanel1.getY());
        this.jPanel2.setSize(width / 2 - 19, height - 38 - this.jComboBox1.getHeight());
        this.jScrollPane1.setSize(this.jPanel1.getWidth() - 20, this.jPanel1.getHeight() - 20 - this.jCheckBox1.getHeight());
        this.jScrollPane2.setSize(this.jPanel2.getWidth() - 20, this.jPanel2.getHeight() - 20 - this.jCheckBox2.getHeight());
        this.jCheckBox1.setLocation(20, this.jPanel1.getHeight() - 10 - this.jCheckBox1.getHeight());
        this.jCheckBox2.setLocation(20, this.jPanel2.getHeight() - 10 - this.jCheckBox2.getHeight());
        this.jButton2.setLocation(this.jPanel2.getWidth() - 40 - this.jButton2.getWidth(), this.jPanel2.getHeight() - 14 - this.jCheckBox2.getHeight());
    }

    @Override
    public void componentMoved(ComponentEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void componentShown(ComponentEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void componentHidden(ComponentEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    class myTableModel extends DefaultTableModel {

        public myTableModel(Object[][] data, Object[] columnNames) {
            super(data, columnNames);
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
    }
}
